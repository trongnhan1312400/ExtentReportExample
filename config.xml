<?xml version="1.0" encoding="UTF-8"?>
<extentreports>
  <configuration>
    <!-- report theme -->
    <!-- standard, dark -->
    <theme>standard</theme>
  
    <!-- document encoding -->
    <!-- defaults to UTF-8 -->
    <encoding>UTF-8</encoding>
    
    <!-- protocol for script and stylesheets -->
    <!-- defaults to https -->
    <protocol>https</protocol>
    
    <!-- title of the document -->
    <documentTitle>ExtentReports 2.0</documentTitle>
    
    <!-- report name - displayed at top-nav -->
    <reportName>Automation Report</reportName>
    
    <!-- report headline - displayed at top-nav, after reportHeadline -->
    <reportHeadline></reportHeadline>
    
    <!-- global date format override -->
    <!-- defaults to yyyy-MM-dd -->
    <dateFormat>yyyy-MM-dd</dateFormat>
    
    <!-- global time format override -->
    <!-- defaults to HH:mm:ss -->
    <timeFormat>HH:mm:ss</timeFormat>
    
    <!-- custom javascript -->
    <scripts>
      <![CDATA[
        $.fn.dynamicTestSearchExternally = function(id) {
            var target = $(this);
            var searchBox = $(id);

            searchBox.off('keyup').on('keyup', function() {
                if (searchBox.val() == '') {
                    target.removeClass('hide').addClass('displayed');
                } else {
                    var condition = parseTimeRangeCondition(searchBox.val());

                    if ($.isEmptyObject(condition))
                    {
                        var searchText = searchBox.val();
                        target.each(function() {
                            var t = $(this);
                            if (t.html().indexOf(searchText) >= 0) {
                                t.removeClass('hide').addClass('displayed');
                            } else {
                                t.removeClass('displayed').addClass('hide');
                            }
                        });
                    } else {
                        target.each(function() {
                            var t = $(this);

                            if (check(condition, getTestBeginTime(t))) {
                                t.removeClass('hide').addClass('displayed');
                            } else {
                                t.removeClass('displayed').addClass('hide');
                            }
                        });
                    };
                }
                redrawCharts();
            });

            return target;
        }



$(document).ready(function() 
{
    $('#test-collection .test').dynamicTestSearchExternally('#test-view #searchTests');
    $('#cat-collection .category-item').dynamicTestSearchExternally('#categories-view #searchTests');
    $('#exception-collection .exception-item').dynamicTestSearchExternally('#exceptions-view #searchTests');
        
});


function parseTimeRangeCondition(value)
{
    var date = {};

    if (0 === value.length) return date;

    var prefix = "#date-range(";

    if (0 === value.indexOf(prefix))
    {
        var pos = value.indexOf(")", prefix.length);
        if (pos < 0) pos = value.length;

        var raws = value.slice(prefix.length, pos).split("->");

        if (raws.length == 2)
        {
            var tempBegin = Date.parse(raws[0].trim());
            var tempEnd = Date.parse(raws[1].trim());

            if (!isNaN(tempBegin) && !isNaN(tempEnd))
            {
                date.begin = tempBegin;
                date.end = tempEnd;
            }
        }
    }

    return date;
}


function check(condition, value)
{
    if ("end" in condition && "begin" in condition)
    {
        return value >= condition.begin && value <= condition.end;
    }

    return true;
}

function getTestBeginTime(jqueryElement)
{
    var startedTimeElements = jqueryElement.find("span[title|='Test started time']");

    return Date.parse(startedTimeElements.text().trim());
}
      ]]>
    </scripts>
    
    <!-- custom styles -->
    <styles>
      <![CDATA[
        
      ]]>
    </styles>
  </configuration>
</extentreports>